{
  "title": "What is Cache Poisoning? How Hackers Manipulate Web Caches and How to Avoid It",
  "content": "September 5, 2024\n/\n##cybersecurity\nWhat is Cache Poisoning? How Hackers Manipulate Web Caches and How to Avoid It\nManish Shivanandhan\nWeb caches play an important role in speeding up our browsing experience. They save copies of web pages and other resources so that users can access them faster.\nBut what happens when these caches become a tool for hackers?\nLet’s look at cache poisoning, how it works, and how to protect against it.\nWhat is a Web Cache?\nCaching means storing a copy of a piece of content. A web cache stores copies of web pages or parts of web content temporarily.\nWhen you visit a website, your browser may cache some elements, like images and scripts. So the next time you visit the same site, the browser can load it faster.\nCaching speeds up websites. It reduces the amount of data that must be transferred over the network. This makes browsing more efficient and provides a smoother experience for users.\nA cache can be in several places. These include:\nBrowser Cache : Your browser keeps a copy of recently visited web pages, images, and other content.\nCDN Cache : CDNs store copies of web resources in multiple, worldwide locations. This ensures that users access a nearby server, reducing load times.\nReverse Proxy Cache : A reverse proxy server sits between users and the web server. It caches content to reduce server load and improve response times.\nWeb caching works on a few basic principles.\nExpiration : Cached content has a time-to-live (TTL) value. After this TTL, the cache will be cleared.\nValidation : The cache checks with the server to see if the stored content is still valid or needs refreshing.\nInvalidation : If a website’s content updates, it will remove the cache and fetch the latest version from the server.\nHow Does Cache Poisoning Work?\nCache poisoning is a cyber-attack where a hacker manipulates the stored data in a web cache. The cache stores a harmful or altered version, not a real page.\nWhen a user requests this cached content, they receive the manipulated data instead. This attack can lead to dangerous scripts running on the user’s browsers.\nIn a cache poisoning attack, a hacker exploits how caching systems store content. Here’s a simplified explanation of how this attack works.\nThe attacker first identifies which resources on a website are cached. They look for pages or resources that the cache might store based on the URL or request headers.\nThe attacker then crafts a request that includes harmful content. This request will look like a legitimate request so that the cache stores the response.\nThe server processes the request and returns a response that gets cached. If the cache server doesn’t check the request, it will store the malicious content.\nNow, when a user requests the cached resource, the cache serves the malicious version instead of the legitimate one.\nCommon Techniques Used in Cache Poisoning\nCache poisoning exploits different vulnerabilities in web caching mechanisms. Some of the most common techniques include:\nHost Header Attacks\nThe “Host” header specifies which domain a request is for. Attackers can change this header. They can trick the server into caching a malicious response. For example\nNormal request\nGET /resource HTTP/1.1\nHost: www.example.com\nMalicious request\nGET /resource HTTP/1.1\nHost: attacker.com\nIf the cache stores the response based on the manipulated host, all users of “www.example.com” may get malicious content.\nHTTP Parameter Pollution\nAttackers can inject unexpected parameters into URLs. This changes server behavior and poisons the cache. For example:\nNormal URL: https://www.example.com/page?id=123\nMalicious URL: https://www.example.com/page?id=123&malicious_flag=101\nIf the server does not sanitize these parameters, it may cache different content. The next user who visits the normal URL might receive the poisoned content.\nVary Header Manipulation\nThe Vary header is an HTTP response header. It tells caches how to store different versions of a web resource based on certain request headers.\nFor example, if a server sends a “Vary: User-Agent” header, it means that the response may vary based on the client’s user agent. So caches will store separate versions of the resource for different user agents. For example, one for desktop browsers and another for mobile browsers.\nIf the “Vary” header is not checked properly, attackers can manipulate request headers to poison the cache.\nFor example, an attacker can craft a request with a manipulated “User-Agent” header. This can result in malicious content being cached for the next user.\nHow to Protect Against Cache Poisoning\nNow that we understand how cache poisoning works, let’s see how to protect against it:\nProper Input Validation\nAlways sanitize and check input from users. Especially when it comes to request headers and URL parameters. This stops attackers from injecting harmful content into cached requests.\nUse Secure Caching Headers\nSet caching headers like “Cache-Control” and “Expires” correctly to avoid caching sensitive data. Use headers such as “no-cache,” “no-store,” and “must-revalidate” for dynamic or sensitive content.\nControl Cache Key Settings\nSet the cache keys properly to avoid caching responses with user-specific parameters. Don’t use request headers or query parameters that attackers can easily manipulate.\nImplement HTTPS\nUsing HTTPS helps prevent attackers from intercepting and modifying requests and responses. HTTPS also reduces the risk of cache poisoning attacks, as it ensures data integrity.\nConclusion\nCache poisoning poses a significant risk to web applications and users. Hackers can manipulate cached content to serve malicious data or steal sensitive information.\nYou can protect your web apps from cache poisoning by learning how it works and by using proper precautions. With the right approach, you can ensure a safer browsing experience for your users.\nCheck out the Stealth Security newsletter for more articles on offensive and defensive cybersecurity.\nADVERTISEMENT\nADVERTISEMENT\nADVERTISEMENT\nADVERTISEMENT\nADVERTISEMENT\nADVERTISEMENT\nADVERTISEMENT\nManish Shivanandhan\nRead more posts.\nIf this article was helpful, share it.\ndocument.addEventListener(\"DOMContentLoaded\",(()=>{const t=document.getElementById(\"tweet-btn\"),e=window.location,n=\"What%20is%20Cache%20Poisoning%3F%20How%20Hackers%20Manipulate%20Web%C2%A0Caches%20and%20How%20to%20Avoid%20It\".replace(/&#39;/g,\"%27\"),o=\"\",i=\"\",r=Boolean(\"\");let a;if(r&&(o||i)){const t={originalPostAuthor:\"\",currentPostAuthor:\"Manish Shivanandhan\"};a=encodeURIComponent(`Thank you ${o||t.originalPostAuthor} for writing this helpful article, and ${i||t.currentPostAuthor} for translating it.`)}else!r&&i&&(a=encodeURIComponent(`Thank you ${i} for writing this helpful article.`));const h=`window.open(\\n    '${a?`https://twitter.com/intent/tweet?text=${a}%0A%0A${n}%0A%0A${e}`:`https://twitter.com/intent/tweet?text=${n}%0A%0A${e}`}',\\n    'share-twitter',\\n    'width=550, height=235'\\n  ); return false;`;t.setAttribute(\"onclick\",h)}));\nLearn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\nADVERTISEMENT",
  "author": "Manish Shivanandhan\n                    \n                \n            \n                \n                    \n                        Manish Shivanandhan",
  "date": "September 5, 2024"
}